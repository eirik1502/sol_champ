import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java-library'
//	id 'application'

}

sourceSets {
    main {
        java {
            exclude 'sol_engine/network_module/trash/**'
        }
    }
}

dependencies {
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    //implementation 'com.google.code.gson:gson:2.8.5'
    compile 'com.google.code.gson:gson:2.8.5'

    compile(group: "com.github.java-json-tools", name: "json-schema-validator", version: "2.2.10")

    // https://mvnrepository.com/artifact/org.joml/joml
    compile group: 'org.joml', name: 'joml', version: '1.9.14'

    //kryonet
    compile "com.esotericsoftware:kryonet:2.22.0-RC1"

//    // IMGUI + LWJGL
    String lwjgl_version = "3.2.2"
    String uno_version = '3f32007ffe'
    String kotlin_version = '1.3.41'
    String glm_version = '6048c31425ae6110258e4b42165f1e636f8b5603'

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

//    compile 'com.github.kotlin-graphics:imgui:1.73-SNAPSHOT'
    ["gl", "glfw", "core"].each {
        compile "com.github.kotlin-graphics.imgui:imgui-$it:-SNAPSHOT"
    }

    compile "com.github.kotlin-graphics:uno-sdk:$uno_version"
    compile "com.github.kotlin-graphics.glm:glm:$glm_version"

    ["", "-glfw", "-opengl"].each {
        compile "org.lwjgl:lwjgl$it:$lwjgl_version"
    }

    switch (OperatingSystem.current()) {
        case OperatingSystem.WINDOWS:
            ext.lwjglNatives = "natives-windows";
            break;
        case OperatingSystem.MAC_OS:
            ext.lwjglNatives = "natives-macos";
            break;
        case OperatingSystem.LINUX:
            ext.lwjglNatives = "natives-linux";
            break;
    }

//    ext.lwjglNatives = when(OperatingSystem.current()) {
//        OperatingSystem.WINDOWS ->
//        "natives-windows"
//        OperatingSystem.LINUX -> "natives-linux"
//        OperatingSystem.MAC_OS -> "natives-macos"
//    }
//    configurations.compile.resolvedConfiguration.getResolvedArtifacts().forEach { println(it) }

// Look up which modules and versions of LWJGL are required and add setup the approriate natives.
    String[] excludeLwjglLibs = ["lwjgl-jawt", "lwjgl-vulkan"]
    configurations.compile.resolvedConfiguration.getResolvedArtifacts()
            .stream()
            .filter {
                !((it.moduleVersion.id.group == "org.lwjgl") && (excludeLwjglLibs.contains(it.moduleVersion.id.name)))
            }
            .forEach {
                if (it.moduleVersion.id.group == "org.lwjgl") {
                    runtime "org.lwjgl:${it.moduleVersion.id.name}:${it.moduleVersion.id.version}:${lwjglNatives}"
                }
            }

    testCompile 'junit:junit:4.12'
}